Alec Greiwe
Team: Vlad Suslikov
Time Spent: 18 hours

Describe the problems/project and why you chose them, challenges you faced (if 
any), your solution, and anything interesting that you would like to share:

Lab 3 Challenge: refactoring trap handlers
We selected this challenge because we wanted cleaner looking code and less
redundancy.  The solution was not that complicated.  Initially a global 
variable was set up that would hold all of the trap functions so it could be 
accessed in trap.c. To this all of the functions were added using the same 
macros but now they hold data containing the name which meant that the global 
information could be removed since it was no longer necessary in trap.c. 
Then trap.c was modified such that it used SETGATE with the correct indices,
that corresponded with traps 0 through 19, into the trap functions array.  
Note: the code was reverted to the point after completion of lab3 in order
to pass the necessary tests and confirm that this alteration functioned
correctly.

Lab 4 Challenge: system call batching
This problem was chosen with the goal of being able to speed up certain 
functions by avoiding the overhead that involves going into the kernel. This 
problem had a couple of simple issues such as where to add the new .h file so 
that it compiled and linked properly but was mostly straight forward. The 
process involved making a batch.h file which contained a struct to store the 
information of a syscall and a method to add appropriate values to the struct 
array in batch.c. This array was then passed into a single syscall which would 
go through each batch struct and run the approriate syscall with the 
appropriate arguments. Interestingly, despite the ability to batch multiple
system calls together, fork had a marginal or even nonexistent runtime 
improvement when batching the necessary system calls in comparison to when it
called each system call separately.  I believe this is an indication that 
switching to and from kernel to be relatively cheap and that the overhead of
generating the batch structs to balance out any benefits gained from avoiding
switches to kernel mode.  Perhaps there would be an improvement if JOS was 
less lightweight or running more processes and environments. 
Note: In order for ping pong test to pass, I've commented out
the lines described in the beginning of lab5 (close_all() in lib/exit.c and 
the ENV_CREATE(fs_fs) line in kern/init.c).
