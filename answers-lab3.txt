Alec Greiwe
Total Time: 28 hours
Team: Vlad Suslikov

1. What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)
	A: To be able to handle different exceptions/interrupts in different/custom ways... syscalls for example.


2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint’s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?
	A: Users cannot decide the type of fault.  So, when softint specifies $14, an interrupt vector 13 is produced because this is a user permission exception as the user does not have permission to make this sort of specification.


3. The breakpoint test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?
	A: If user not given permission -> gen prot fault. But, by allowing a DPL of 3, users can use breakpoints. 


4. What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?
	A: To keep the kernel and user separated for purposes of security and reliability against potentially malicious (or just buggy code) users. 


5. What causes this page fault? You don’t need to fix it, but consider how you might and explain why it happens.
	A: Trying to access memory beyond the user stack causes a page fault.  I'd fix this by allocating more stack to the user when a page fault ocurred, assuming there is enough latent space available.


6. The Go program user/gofib.go is more interesting as it uses closures. Run user/gofib (make run-gofib). What’s the output?
	A: Prints the fibonacci sequence from 1 to 55


7. You may have noticed that lib/libgo.c calls malloc but never calls free: our Go runtime doesn’t implement garbage collection, simply leaking memory. When a Go program exits, will the JOS kernel be able to reclaim the memory it has allocated?
	A: It won't be able to reclaim allocated memory until the environment is destroyed and the used pages are re-added to the pagefreelist.
